(?<clock>\S+) (?<timestamp>\d+) (?<component>\S+) (?<level>\S+) (?<host>\S+) (?<class>\S+) (?<function>\S+) (?<file>\S+):(?<line>\d+) (?<event>.+)

{"thread1":1} 0 caf TRACE thread1 caf.group_manager init group_manager.cpp:465 ENTRY
{"thread1":2} 0 caf TRACE thread1 caf.$.local_group_module local_group_module group_manager.cpp:333 ENTRY
{"thread1":3} 0 caf TRACE thread1 caf.$.local_group_module operator() group_manager.cpp:333 EXIT
{"thread1":4} 0 caf TRACE thread1 caf.group_manager operator() group_manager.cpp:465 EXIT
{"thread1":5} 0 caf TRACE thread1 caf.detail.tick_emitter interval tick_emitter.cpp:50 ENTRY x = 5ms
{"thread1":6} 0 caf TRACE thread1 caf.detail.tick_emitter operator() tick_emitter.cpp:50 EXIT
{"thread1":7} 0 caf DEBUG thread1 caf.scheduled_actor scheduled_actor scheduled_actor.cpp:143 interval = 5ms max_batch_delay_ticks_ = 1 credit_round_ticks_ = 2
{"thread1":8} 0 caf_flow DEBUG thread1 caf make_actor make_actor.hpp:43 SPAWN ; ID = 1 ; NAME = spawn_server ; TYPE = caf.stateful_actor ; ARGS = (actor_config(hidden_flag)) ; NODE = invalid-node ; GROUPS = []
{"actor1":1} 0 caf TRACE actor1 caf.scheduled_actor launch scheduled_actor.cpp:204 ENTRY lazy = true hide = true
{"actor1":2} 0 caf TRACE actor1 bool,%20bool)<GLOBAL operator() scheduled_actor.cpp:204 EXIT
{"thread1":9} 0 caf TRACE thread1 caf.detail.tick_emitter interval tick_emitter.cpp:50 ENTRY x = 5ms
{"thread1":10} 0 caf TRACE thread1 caf.detail.tick_emitter operator() tick_emitter.cpp:50 EXIT
{"thread1":11} 0 caf DEBUG thread1 caf.scheduled_actor scheduled_actor scheduled_actor.cpp:143 interval = 5ms max_batch_delay_ticks_ = 1 credit_round_ticks_ = 2
{"thread1":12} 0 caf_flow DEBUG thread1 caf make_actor make_actor.hpp:43 SPAWN ; ID = 2 ; NAME = config_server ; TYPE = caf.stateful_actor ; ARGS = (actor_config(hidden_flag)) ; NODE = invalid-node ; GROUPS = []
{"actor2":1} 0 caf TRACE actor2 caf.scheduled_actor launch scheduled_actor.cpp:204 ENTRY lazy = true hide = true
{"actor2":2} 0 caf TRACE actor2 bool,%20bool)<GLOBAL operator() scheduled_actor.cpp:204 EXIT
{"thread1":13} 1 caf TRACE thread1 caf.scheduler.abstract_coordinator start abstract_coordinator.cpp:241 ENTRY
{"thread1":14} 1 caf_flow DEBUG thread1 caf make_actor make_actor.hpp:43 SPAWN ; ID = 3 ; NAME = printer_actor ; TYPE = caf.scheduler.ANON.printer_actor ; ARGS = (actor_config(detached_flag, hidden_flag)) ; NODE = invalid-node ; GROUPS = []
{"actor3":1} 1 caf TRACE actor3 caf.blocking_actor launch blocking_actor.cpp:93 ENTRY hide = true
{"actor3":2} 1 caf TRACE actor3 bool,%20bool)<GLOBAL operator() blocking_actor.cpp:93 EXIT
{"thread1":15} 1 caf TRACE thread1 caf.scheduler.abstract_coordinator operator() abstract_coordinator.cpp:241 EXIT
{"thread1":16} 1 caf TRACE thread1 caf.group_manager start group_manager.cpp:476 ENTRY
{"thread1":17} 1 caf TRACE thread1 caf.group_manager operator() group_manager.cpp:476 EXIT
{"actor3":3} 1 caf TRACE actor3 caf.local_actor initialize local_actor.cpp:120 ENTRY id = 3 name = "printer_actor"
{"actor3":4} 2 caf TRACE actor3 caf.local_actor operator() local_actor.cpp:120 EXIT
{"thread1":18} 2 caf TRACE thread1 caf.detail.tick_emitter interval tick_emitter.cpp:50 ENTRY x = 5ms
{"thread1":19} 2 caf TRACE thread1 caf.detail.tick_emitter operator() tick_emitter.cpp:50 EXIT
{"thread1":20} 2 caf DEBUG thread1 caf.scheduled_actor scheduled_actor scheduled_actor.cpp:143 interval = 5ms max_batch_delay_ticks_ = 1 credit_round_ticks_ = 2
{"actor3":5} 2 caf TRACE actor3 caf.blocking_actor receive_impl blocking_actor.cpp:234 ENTRY mid = message_id(1152921504606846976)
{"actor4":1} 2 caf TRACE actor4 caf.scheduled_actor launch scheduled_actor.cpp:204 ENTRY lazy = false hide = false
{"actor4":2} 2 caf DEBUG actor4 caf.actor_registry inc_running actor_registry.cpp:102 value = 1
{"actor4":3} 2 caf TRACE actor4 bool,%20bool)<GLOBAL operator() scheduled_actor.cpp:204 EXIT
{"thread1":21} 2 caf TRACE thread1 caf.detail.tick_emitter interval tick_emitter.cpp:50 ENTRY x = 5ms
{"thread1":22} 2 caf TRACE thread1 caf.detail.tick_emitter operator() tick_emitter.cpp:50 EXIT
{"thread1":23} 2 caf DEBUG thread1 caf.scheduled_actor scheduled_actor scheduled_actor.cpp:143 interval = 5ms max_batch_delay_ticks_ = 1 credit_round_ticks_ = 2
{"actor5":1} 2 caf TRACE actor5 caf.scheduled_actor launch scheduled_actor.cpp:204 ENTRY lazy = false hide = false
{"actor5":2} 2 caf DEBUG actor5 caf.actor_registry inc_running actor_registry.cpp:102 value = 2
{"actor5":3} 2 caf TRACE actor5 bool,%20bool)<GLOBAL operator() scheduled_actor.cpp:204 EXIT
{"thread1":24} 2 caf TRACE thread1 caf.actor_system ~actor_system actor_system.cpp:295 ENTRY
{"thread1":25} 2 caf DEBUG thread1 caf.actor_system ~actor_system actor_system.cpp:296 shutdown actor system
{"thread1":26} 2 caf TRACE thread1 caf.actor_registry await_running_count_equal actor_registry.cpp:123 ENTRY expected = 0
{"actor5":4} 2 caf TRACE actor5 caf.scheduled_actor resume scheduled_actor.cpp:381 ENTRY max_throughput = 18446744073709551615
{"thread1":27} 2 caf DEBUG thread1 caf.actor_registry await_running_count_equal actor_registry.cpp:126 running_.load() = 2
{"actor4":4} 2 caf TRACE actor4 caf.scheduled_actor resume scheduled_actor.cpp:381 ENTRY max_throughput = 18446744073709551615
{"actor4":5} 2 caf TRACE actor4 caf.scheduled_actor activate scheduled_actor.cpp:744 ENTRY
{"actor5":5} 2 caf TRACE actor5 caf.scheduled_actor activate scheduled_actor.cpp:744 ENTRY
{"actor5":6} 2 caf TRACE actor5 caf.event_based_actor initialize event_based_actor.cpp:36 ENTRY subtype = "caf.event_based_actor"
{"actor4":6} 2 caf TRACE actor4 caf.event_based_actor initialize event_based_actor.cpp:36 ENTRY subtype = "caf.event_based_actor"
{"actor4":7} 2 caf TRACE actor4 caf.local_actor initialize local_actor.cpp:120 ENTRY id = 4 name = "scheduled_actor"
{"actor5":7} 2 caf TRACE actor5 caf.local_actor initialize local_actor.cpp:120 ENTRY id = 5 name = "scheduled_actor"
{"actor4":8} 2 caf TRACE actor4 caf.local_actor operator() local_actor.cpp:120 EXIT
{"actor5":8} 2 caf TRACE actor5 caf.local_actor operator() local_actor.cpp:120 EXIT
{"actor4":9} 2 caf TRACE actor4 caf.event_based_actor make_behavior event_based_actor.cpp:50 ENTRY
{"actor5":9} 2 caf TRACE actor5 caf.event_based_actor make_behavior event_based_actor.cpp:50 ENTRY
{"actor4":10} 2 caf TRACE actor4 caf.event_based_actor operator() event_based_actor.cpp:50 EXIT
{"actor4":11} 2 caf DEBUG actor4 caf.event_based_actor initialize event_based_actor.cpp:44 make_behavior() did return a valid behavior
{"actor4":12} 2 caf TRACE actor4 caf.scheduled_actor set_receive_timeout scheduled_actor.cpp:482 ENTRY
{"actor4":13} 2 caf TRACE actor4 caf.scheduled_actor operator() scheduled_actor.cpp:482 EXIT
{"actor4":14} 2 caf TRACE actor4 caf.event_based_actor operator() event_based_actor.cpp:36 EXIT
{"actor4":15} 2 caf TRACE actor4 caf.scheduled_actor finalize scheduled_actor.cpp:842 ENTRY
{"actor4":16} 2 caf TRACE actor4 caf.scheduled_actor operator() scheduled_actor.cpp:842 EXIT
{"actor4":17} 2 caf DEBUG actor4 caf.scheduled_actor activate scheduled_actor.cpp:761 initialized actor: name() = "scheduled_actor"
{"actor4":18} 2 caf TRACE actor4 caf.scheduled_actor operator() scheduled_actor.cpp:744 EXIT
{"actor4":19} 2 caf DEBUG actor4 caf.scheduled_actor resume scheduled_actor.cpp:402 start new DRR round
{"actor4":20} 2 caf TRACE actor4 size_t)<GLOBAL operator() scheduled_actor.cpp:381 EXIT
{"actor5":10} 2 caf TRACE actor5 caf.scheduled_actor enqueue scheduled_actor.cpp:158 ENTRY *ptr = mailbox_element(5@invalid-node, message_id(1152921504606846977), <unprintable>, ("HiTheRe"))
{"actor5":11} 2 caf_flow DEBUG actor5 caf.scheduled_actor enqueue scheduled_actor.cpp:159 SEND ; TO = 4@invalid-node ; FROM = 5@invalid-node ; STAGES = [] ; CONTENT = ("HiTheRe")
{"actor5":12} 2 caf_flow DEBUG actor5 caf.scheduled_actor enqueue scheduled_actor.cpp:164 ACCEPT ; UNBLOCKED = true
{"actor5":13} 2 caf TRACE actor5 caf.execution_unit*)<GLOBAL operator() scheduled_actor.cpp:158 EXIT
{"actor5":14} 2 caf TRACE actor5 caf.local_actor request_response_timeout local_actor.cpp:63 ENTRY timeout = 9223372036854775807ns mid = message_id(1152921504606846977)
{"actor5":15} 2 caf TRACE actor5 caf.message_id)<GLOBAL operator() local_actor.cpp:63 EXIT
{"actor5":16} 2 caf TRACE actor5 caf.event_based_actor operator() event_based_actor.cpp:50 EXIT
{"actor5":17} 2 caf DEBUG actor5 caf.event_based_actor initialize event_based_actor.cpp:41 make_behavior() did not return a behavior: alive = true
{"actor5":18} 2 caf TRACE actor5 caf.event_based_actor operator() event_based_actor.cpp:36 EXIT
{"actor5":19} 2 caf TRACE actor5 caf.scheduled_actor finalize scheduled_actor.cpp:842 ENTRY
{"actor5":20} 2 caf TRACE actor5 caf.scheduled_actor operator() scheduled_actor.cpp:842 EXIT
{"actor5":21} 2 caf DEBUG actor5 caf.scheduled_actor activate scheduled_actor.cpp:761 initialized actor: name() = "scheduled_actor"
{"actor5":22} 2 caf TRACE actor5 caf.scheduled_actor operator() scheduled_actor.cpp:744 EXIT
{"actor5":23} 2 caf DEBUG actor5 caf.scheduled_actor resume scheduled_actor.cpp:402 start new DRR round
{"actor5":24} 2 caf TRACE actor5 size_t)<GLOBAL operator() scheduled_actor.cpp:381 EXIT
{"actor4":21} 2 caf TRACE actor4 caf.scheduled_actor resume scheduled_actor.cpp:381 ENTRY max_throughput = 18446744073709551615
{"actor4":22} 2 caf TRACE actor4 caf.scheduled_actor activate scheduled_actor.cpp:744 ENTRY
{"actor4":23} 2 caf TRACE actor4 caf.scheduled_actor operator() scheduled_actor.cpp:744 EXIT
{"actor4":24} 2 caf DEBUG actor4 caf.scheduled_actor resume scheduled_actor.cpp:402 start new DRR round
{"actor4":25} 2 caf TRACE actor4 caf.scheduled_actor.mailbox_visitor operator() scheduled_actor.cpp:364 ENTRY x = mailbox_element(5@invalid-node, message_id(1152921504606846977), <unprintable>, ("HiTheRe")) handled_msgs = 0
{"actor4":26} 2 caf TRACE actor4 caf.scheduled_actor reactivate scheduled_actor.cpp:787 ENTRY x = mailbox_element(5@invalid-node, message_id(1152921504606846977), <unprintable>, ("HiTheRe"))
{"actor4":27} 2 caf TRACE actor4 caf.scheduled_actor consume scheduled_actor.cpp:626 ENTRY x = mailbox_element(5@invalid-node, message_id(1152921504606846977), <unprintable>, ("HiTheRe"))
{"actor4":28,"actor5":11} 2 caf_flow DEBUG actor4 caf.scheduled_actor consume scheduled_actor.cpp:628 RECEIVE ; FROM = 5@invalid-node ; STAGES = [] ; CONTENT = ("HiTheRe")
{"actor4":29,"actor5":11} 2 caf TRACE actor4 caf.scheduled_actor categorize scheduled_actor.cpp:551 ENTRY x = mailbox_element(5@invalid-node, message_id(1152921504606846977), <unprintable>, ("HiTheRe"))
{"actor4":30,"actor5":11} 2 caf TRACE actor4 caf.scheduled_actor operator() scheduled_actor.cpp:551 EXIT
{"actor4":31,"actor5":11} 2 caf TRACE actor4 caf.detail.default_invoke_result_visitor<Self> operator() default_invoke_result_visitor.hpp:48 ENTRY x = ("HITHERE")
{"actor4":32,"actor5":11} 2 caf DEBUG actor4 caf.detail.default_invoke_result_visitor<Self> deliver default_invoke_result_visitor.hpp:64 respond via response_promise
{"actor4":33,"actor5":11} 2 caf TRACE actor4 caf.response_promise deliver_impl response_promise.cpp:87 ENTRY msg = ("HITHERE")
{"actor4":34,"actor5":11} 2 caf TRACE actor4 caf.scheduled_actor enqueue scheduled_actor.cpp:158 ENTRY *ptr = mailbox_element(4@invalid-node, message_id(10376293541461622785), <unprintable>, ("HITHERE"))
{"actor4":35,"actor5":11} 2 caf_flow DEBUG actor4 caf.scheduled_actor enqueue scheduled_actor.cpp:159 SEND ; TO = 5@invalid-node ; FROM = 4@invalid-node ; STAGES = [] ; CONTENT = ("HITHERE")
{"actor4":36,"actor5":11} 2 caf_flow DEBUG actor4 caf.scheduled_actor enqueue scheduled_actor.cpp:164 ACCEPT ; UNBLOCKED = true
{"actor4":37,"actor5":11} 2 caf TRACE actor4 caf.execution_unit*)<GLOBAL operator() scheduled_actor.cpp:158 EXIT
{"actor4":38,"actor5":11} 2 caf TRACE actor4 caf.response_promise operator() response_promise.cpp:87 EXIT
{"actor4":39,"actor5":11} 2 caf TRACE actor4 operator() default_invoke_result_visitor.hpp:48 EXIT
2 caf_flow DEBUG actor4 140326771668736 caf.scheduled_actor consume scheduled_actor.cpp:729 FINALIZE
{"actor4":40,"actor5":11} 2 caf TRACE actor4 caf.scheduled_actor operator() scheduled_actor.cpp:626 EXIT
{"actor4":41,"actor5":11} 2 caf TRACE actor4 caf.scheduled_actor finalize scheduled_actor.cpp:842 ENTRY
{"actor4":42,"actor5":11} 2 caf TRACE actor4 caf.scheduled_actor operator() scheduled_actor.cpp:842 EXIT
{"actor4":43,"actor5":11} 2 caf TRACE actor4 caf.scheduled_actor operator() scheduled_actor.cpp:787 EXIT
{"actor4":44,"actor5":11} 3 caf TRACE actor4 caf.scheduled_actor.mailbox_visitor operator() scheduled_actor.cpp:364 EXIT
{"actor4":45,"actor5":11} 3 caf TRACE actor4 caf.scheduled_actor finalize scheduled_actor.cpp:842 ENTRY
{"actor4":46,"actor5":11} 3 caf TRACE actor4 caf.scheduled_actor operator() scheduled_actor.cpp:842 EXIT
{"actor5":25} 3 caf TRACE actor5 caf.scheduled_actor resume scheduled_actor.cpp:381 ENTRY max_throughput = 18446744073709551615
{"actor5":26} 3 caf TRACE actor5 caf.scheduled_actor activate scheduled_actor.cpp:744 ENTRY
{"actor4":47,"actor5":11} 3 caf TRACE actor4 caf.scheduled_actor advance_streams scheduled_actor.cpp:1159 ENTRY
{"actor5":27} 3 caf TRACE actor5 caf.scheduled_actor operator() scheduled_actor.cpp:744 EXIT
{"actor4":48,"actor5":11} 3 caf DEBUG actor4 caf.scheduled_actor advance_streams scheduled_actor.cpp:1161 tick emitter not started yet
{"actor5":28} 3 caf DEBUG actor5 caf.scheduled_actor resume scheduled_actor.cpp:402 start new DRR round
{"actor4":49,"actor5":11} 3 caf TRACE actor4 caf.scheduled_actor operator() scheduled_actor.cpp:1159 EXIT
{"actor4":50,"actor5":11} 3 caf DEBUG actor4 caf.scheduled_actor resume scheduled_actor.cpp:402 start new DRR round
{"actor4":51,"actor5":11} 3 caf TRACE actor4 caf.scheduled_actor set_receive_timeout scheduled_actor.cpp:482 ENTRY
{"actor4":52,"actor5":11} 3 caf TRACE actor4 caf.scheduled_actor operator() scheduled_actor.cpp:482 EXIT
{"actor4":53,"actor5":11} 3 caf TRACE actor4 size_t)<GLOBAL operator() scheduled_actor.cpp:381 EXIT
{"actor5":29} 3 caf TRACE actor5 caf.scheduled_actor.mailbox_visitor operator() scheduled_actor.cpp:364 ENTRY x = mailbox_element(4@invalid-node, message_id(10376293541461622785), <unprintable>, ("HITHERE")) handled_msgs = 0
{"actor5":30} 3 caf TRACE actor5 caf.scheduled_actor reactivate scheduled_actor.cpp:787 ENTRY x = mailbox_element(4@invalid-node, message_id(10376293541461622785), <unprintable>, ("HITHERE"))
{"actor5":31} 3 caf TRACE actor5 caf.scheduled_actor consume scheduled_actor.cpp:626 ENTRY x = mailbox_element(4@invalid-node, message_id(10376293541461622785), <unprintable>, ("HITHERE"))
{"actor4":35,"actor5":32} 3 caf_flow DEBUG actor5 caf.scheduled_actor consume scheduled_actor.cpp:628 RECEIVE ; FROM = 4@invalid-node ; STAGES = [] ; CONTENT = ("HITHERE")
{"actor4":35,"actor5":33} 3 caf TRACE actor5 caf.blocking_actor enqueue blocking_actor.cpp:67 ENTRY *ptr = mailbox_element(null:pointer, message_id(1152921504606846976), <unprintable>, (caf::add_atom(), 5, "test_actor_buddy_function: Got \""))
{"actor4":35,"actor5":34} 3 caf_flow DEBUG actor5 caf.blocking_actor enqueue blocking_actor.cpp:68 SEND ; TO = 3@invalid-node ; FROM = null:pointer ; STAGES = [] ; CONTENT = (caf::add_atom(), 5, "test_actor_buddy_function: Got \"")
{"actor4":35,"actor5":35} 3 caf_flow DEBUG actor5 caf.blocking_actor enqueue blocking_actor.cpp:79 ACCEPT ; UNBLOCKED = false
{"actor4":35,"actor5":36} 3 caf TRACE actor5 caf.execution_unit*)<GLOBAL operator() blocking_actor.cpp:67 EXIT
{"actor4":35,"actor5":37} 3 caf TRACE actor5 caf.blocking_actor enqueue blocking_actor.cpp:67 ENTRY *ptr = mailbox_element(null:pointer, message_id(1152921504606846976), <unprintable>, (caf::add_atom(), 5, "HITHERE"))
{"actor3":6} 3 caf TRACE actor3 caf.blocking_actor.mailbox_visitor operator() blocking_actor.cpp:162 ENTRY x = mailbox_element(null:pointer, message_id(1152921504606846976), <unprintable>, (caf::add_atom(), 5, "test_actor_buddy_function: Got \""))
{"actor3":7,"actor4":35,"actor5":34} 3 caf_flow DEBUG actor3 caf.blocking_actor.mailbox_visitor operator() blocking_actor.cpp:163 RECEIVE ; FROM = null:pointer ; STAGES = [] ; CONTENT = (caf::add_atom(), 5, "test_actor_buddy_function: Got \"")
{"actor3":8,"actor4":35,"actor5":34} 4 caf TRACE actor3 caf.detail.default_invoke_result_visitor<Self> operator() default_invoke_result_visitor.hpp:48 ENTRY x = <empty-message>
{"actor3":9,"actor4":35,"actor5":34} 4 caf DEBUG actor3 caf.detail.default_invoke_result_visitor<Self> delegate default_invoke_result_visitor.hpp:80 suppress response message: invalid response promise
{"actor4":35,"actor5":38} 3 caf_flow DEBUG actor5 caf.blocking_actor enqueue blocking_actor.cpp:68 SEND ; TO = 3@invalid-node ; FROM = null:pointer ; STAGES = [] ; CONTENT = (caf::add_atom(), 5, "HITHERE")
{"actor3":10,"actor4":35,"actor5":34} 4 caf TRACE actor3 operator() default_invoke_result_visitor.hpp:48 EXIT
4 caf_flow DEBUG actor3 140326738097920 caf.blocking_actor.mailbox_visitor operator() blocking_actor.cpp:227 FINALIZE
{"actor3":11,"actor4":35,"actor5":34} 4 caf TRACE actor3 caf.blocking_actor.mailbox_visitor operator() blocking_actor.cpp:162 EXIT
{"actor3":12,"actor4":35,"actor5":34} 4 caf TRACE actor3 caf.blocking_actor.mailbox_visitor operator() blocking_actor.cpp:162 ENTRY x = mailbox_element(null:pointer, message_id(1152921504606846976), <unprintable>, (caf::add_atom(), 5, "HITHERE"))
{"actor4":35,"actor5":39} 4 caf_flow DEBUG actor5 caf.blocking_actor enqueue blocking_actor.cpp:79 ACCEPT ; UNBLOCKED = false
{"actor3":13,"actor4":35,"actor5":38} 4 caf_flow DEBUG actor3 caf.blocking_actor.mailbox_visitor operator() blocking_actor.cpp:163 RECEIVE ; FROM = null:pointer ; STAGES = [] ; CONTENT = (caf::add_atom(), 5, "HITHERE")
{"actor4":35,"actor5":40} 4 caf TRACE actor5 caf.execution_unit*)<GLOBAL operator() blocking_actor.cpp:67 EXIT
{"actor4":35,"actor5":41} 5 caf TRACE actor5 caf.blocking_actor enqueue blocking_actor.cpp:67 ENTRY *ptr = mailbox_element(null:pointer, message_id(1152921504606846976), <unprintable>, (caf::add_atom(), 5, ".
))
{"actor3":14,"actor4":35,"actor5":38} 5 caf TRACE actor3 caf.detail.default_invoke_result_visitor<Self> operator() default_invoke_result_visitor.hpp:48 ENTRY x = <empty-message>
{"actor3":15,"actor4":35,"actor5":38} 5 caf DEBUG actor3 caf.detail.default_invoke_result_visitor<Self> delegate default_invoke_result_visitor.hpp:80 suppress response message: invalid response promise
{"actor3":16,"actor4":35,"actor5":38} 5 caf TRACE actor3 operator() default_invoke_result_visitor.hpp:48 EXIT
6 caf_flow DEBUG actor3 140326738097920 caf.blocking_actor.mailbox_visitor operator() blocking_actor.cpp:227 FINALIZE
{"actor3":17,"actor4":35,"actor5":38} 6 caf TRACE actor3 caf.blocking_actor.mailbox_visitor operator() blocking_actor.cpp:162 EXIT
{"actor4":35,"actor5":42} 5 caf_flow DEBUG actor5 caf.blocking_actor enqueue blocking_actor.cpp:68 SEND ; TO = 3@invalid-node ; FROM = null:pointer ; STAGES = [] ; CONTENT = (caf::add_atom(), 5, ".
)
{"actor4":35,"actor5":43} 6 caf_flow DEBUG actor5 caf.blocking_actor enqueue blocking_actor.cpp:79 ACCEPT ; UNBLOCKED = false
{"actor3":18,"actor4":35,"actor5":38} 6 caf TRACE actor3 caf.blocking_actor.mailbox_visitor operator() blocking_actor.cpp:162 ENTRY x = mailbox_element(null:pointer, message_id(1152921504606846976), <unprintable>, (caf::add_atom(), 5, ".
))
{"actor4":35,"actor5":44} 6 caf TRACE actor5 caf.execution_unit*)<GLOBAL operator() blocking_actor.cpp:67 EXIT
{"actor4":35,"actor5":45} 6 caf_flow DEBUG actor5 caf.scheduled_actor consume scheduled_actor.cpp:729 FINALIZE
{"actor4":35,"actor5":46} 6 caf TRACE actor5 caf.scheduled_actor operator() scheduled_actor.cpp:626 EXIT
{"actor4":35,"actor5":47} 6 caf TRACE actor5 caf.scheduled_actor finalize scheduled_actor.cpp:842 ENTRY
{"actor3":19,"actor4":35,"actor5":42} 6 caf_flow DEBUG actor3 caf.blocking_actor.mailbox_visitor operator() blocking_actor.cpp:163 RECEIVE ; FROM = null:pointer ; STAGES = [] ; CONTENT = (caf::add_atom(), 5, ".
)
{"actor3":20,"actor4":35,"actor5":42} 6 caf TRACE actor3 caf.detail.default_invoke_result_visitor<Self> operator() default_invoke_result_visitor.hpp:48 ENTRY x = <empty-message>
{"actor3":21,"actor4":35,"actor5":42} 6 caf DEBUG actor3 caf.detail.default_invoke_result_visitor<Self> delegate default_invoke_result_visitor.hpp:80 suppress response message: invalid response promise
{"actor3":22,"actor4":35,"actor5":42} 6 caf TRACE actor3 operator() default_invoke_result_visitor.hpp:48 EXIT
6 caf_flow DEBUG actor3 140326738097920 caf.blocking_actor.mailbox_visitor operator() blocking_actor.cpp:227 FINALIZE
{"actor4":35,"actor5":48} 6 caf DEBUG actor5 caf.scheduled_actor finalize scheduled_actor.cpp:865 actor has no behavior and is ready for cleanup
{"actor4":35,"actor5":49} 6 caf TRACE actor5 caf.scheduled_actor cleanup scheduled_actor.cpp:225 ENTRY fail_state = none
{"actor4":35,"actor5":50} 6 caf TRACE actor5 caf.local_actor cleanup local_actor.cpp:124 ENTRY fail_state = none
{"actor4":35,"actor5":51} 6 caf DEBUG actor5 caf.actor_registry dec_running actor_registry.cpp:118 new_val = 1
{"actor3":23,"actor4":35,"actor5":42} 6 caf TRACE actor3 caf.blocking_actor.mailbox_visitor operator() blocking_actor.cpp:162 EXIT
{"actor4":35,"actor5":52} 6 caf_flow DEBUG actor5 caf.local_actor cleanup local_actor.cpp:127 TERMINATE ; ID = 5 ; REASON = none ; NODE = invalid-node
{"actor4":35,"actor5":53} 6 caf TRACE actor5 caf.monitorable_actor cleanup monitorable_actor.cpp:78 ENTRY reason = none
{"actor4":35,"actor5":54} 6 caf DEBUG actor5 caf.monitorable_actor cleanup monitorable_actor.cpp:95 cleanup id() = 5 node() = invalid-node fail_state_ = none
{"actor4":35,"actor5":55} 7 caf TRACE actor5 caf.blocking_actor enqueue blocking_actor.cpp:67 ENTRY *ptr = mailbox_element(null:pointer, message_id(1152921504606846976), <unprintable>, (caf::delete_atom(), 5))
{"actor4":35,"actor5":56} 7 caf_flow DEBUG actor5 caf.blocking_actor enqueue blocking_actor.cpp:68 SEND ; TO = 3@invalid-node ; FROM = null:pointer ; STAGES = [] ; CONTENT = (caf::delete_atom(), 5)
{"actor3":24,"actor4":35,"actor5":42} 7 caf TRACE actor3 caf.blocking_actor.mailbox_visitor operator() blocking_actor.cpp:162 ENTRY x = mailbox_element(null:pointer, message_id(1152921504606846976), <unprintable>, (caf::delete_atom(), 5))
{"actor3":25,"actor4":35,"actor5":56} 7 caf_flow DEBUG actor3 caf.blocking_actor.mailbox_visitor operator() blocking_actor.cpp:163 RECEIVE ; FROM = null:pointer ; STAGES = [] ; CONTENT = (caf::delete_atom(), 5)
{"actor3":26,"actor4":35,"actor5":56} 7 caf TRACE actor3 caf.detail.default_invoke_result_visitor<Self> operator() default_invoke_result_visitor.hpp:48 ENTRY x = <empty-message>
{"actor3":27,"actor4":35,"actor5":56} 7 caf DEBUG actor3 caf.detail.default_invoke_result_visitor<Self> delegate default_invoke_result_visitor.hpp:80 suppress response message: invalid response promise
{"actor3":28,"actor4":35,"actor5":56} 7 caf TRACE actor3 operator() default_invoke_result_visitor.hpp:48 EXIT
7 caf_flow DEBUG actor3 140326738097920 caf.blocking_actor.mailbox_visitor operator() blocking_actor.cpp:227 FINALIZE
{"actor3":29,"actor4":35,"actor5":56} 7 caf TRACE actor3 caf.blocking_actor.mailbox_visitor operator() blocking_actor.cpp:162 EXIT
{"actor4":35,"actor5":57} 7 caf_flow DEBUG actor5 caf.blocking_actor enqueue blocking_actor.cpp:79 ACCEPT ; UNBLOCKED = false
{"actor4":35,"actor5":58} 7 caf TRACE actor5 caf.execution_unit*)<GLOBAL operator() blocking_actor.cpp:67 EXIT
{"actor4":35,"actor5":59} 7 caf TRACE actor5 caf.execution_unit*)<GLOBAL operator() monitorable_actor.cpp:78 EXIT
{"actor4":35,"actor5":60} 7 caf TRACE actor5 caf.execution_unit*)<GLOBAL operator() local_actor.cpp:124 EXIT
{"thread1":28} 7 caf DEBUG thread1 caf.actor_registry await_running_count_equal actor_registry.cpp:126 running_.load() = 1
{"actor4":35,"actor5":61} 7 caf TRACE actor5 caf.execution_unit*)<GLOBAL operator() scheduled_actor.cpp:225 EXIT
{"actor4":35,"actor5":62} 7 caf TRACE actor5 caf.scheduled_actor operator() scheduled_actor.cpp:842 EXIT
{"actor4":35,"actor5":63} 7 caf DEBUG actor5 caf.scheduled_actor reactivate scheduled_actor.cpp:805 actor finalized
{"actor4":35,"actor5":64} 8 caf TRACE actor5 caf.scheduled_actor operator() scheduled_actor.cpp:787 EXIT
{"actor4":35,"actor5":65} 8 caf TRACE actor5 caf.scheduled_actor.mailbox_visitor operator() scheduled_actor.cpp:364 EXIT
{"actor4":54,"actor5":11} 8 caf TRACE actor4 caf.scheduled_actor cleanup scheduled_actor.cpp:225 ENTRY fail_state = exit_reason(unreachable)
{"actor4":55,"actor5":11} 8 caf TRACE actor4 caf.local_actor cleanup local_actor.cpp:124 ENTRY fail_state = exit_reason(unreachable)
{"actor4":56,"actor5":11} 8 caf DEBUG actor4 caf.actor_registry dec_running actor_registry.cpp:118 new_val = 0
{"actor4":57,"actor5":11} 8 caf_flow DEBUG actor4 caf.local_actor cleanup local_actor.cpp:127 TERMINATE ; ID = 4 ; REASON = exit_reason(unreachable) ; NODE = invalid-node
{"actor4":58,"actor5":11} 8 caf TRACE actor4 caf.monitorable_actor cleanup monitorable_actor.cpp:78 ENTRY reason = exit_reason(unreachable)
{"actor4":59,"actor5":11} 8 caf DEBUG actor4 caf.monitorable_actor cleanup monitorable_actor.cpp:95 cleanup id() = 4 node() = invalid-node fail_state_ = exit_reason(unreachable)
{"actor4":60,"actor5":11} 8 caf TRACE actor4 caf.execution_unit*)<GLOBAL operator() monitorable_actor.cpp:78 EXIT
{"actor4":61,"actor5":11} 8 caf TRACE actor4 caf.execution_unit*)<GLOBAL operator() local_actor.cpp:124 EXIT
{"actor4":62,"actor5":11} 8 caf TRACE actor4 caf.execution_unit*)<GLOBAL operator() scheduled_actor.cpp:225 EXIT
{"actor4":35,"actor5":66} 8 caf TRACE actor5 caf.scheduled_actor finalize scheduled_actor.cpp:842 ENTRY
{"actor4":35,"actor5":67} 8 caf TRACE actor5 caf.scheduled_actor operator() scheduled_actor.cpp:842 EXIT
{"actor4":35,"actor5":68} 8 caf TRACE actor5 size_t)<GLOBAL operator() scheduled_actor.cpp:381 EXIT
{"thread1":29} 8 caf TRACE thread1 <GLOBALGLOBAL operator() actor_registry.cpp:123 EXIT
{"thread1":30} 9 caf TRACE thread1 caf anon_send_exit send.hpp:140 ENTRY dest = 1@invalid-node reason = user_shutdown
{"thread1":31} 9 caf TRACE thread1 caf.scheduled_actor enqueue scheduled_actor.cpp:158 ENTRY *ptr = mailbox_element(null:pointer, message_id(1152921504606846976), <unprintable>, (exit_msg(1@invalid-node, exit_reason(user_shutdown))))
{"thread1":32} 9 caf_flow DEBUG thread1 caf.scheduled_actor enqueue scheduled_actor.cpp:159 SEND ; TO = 1@invalid-node ; FROM = null:pointer ; STAGES = [] ; CONTENT = (exit_msg(1@invalid-node, exit_reason(user_shutdown)))
{"thread1":33} 9 caf_flow DEBUG thread1 caf.scheduled_actor enqueue scheduled_actor.cpp:164 ACCEPT ; UNBLOCKED = true
{"thread1":34} 9 caf TRACE thread1 caf.execution_unit*)<GLOBAL operator() scheduled_actor.cpp:158 EXIT
{"thread1":35} 9 caf TRACE thread1 Dest&,%20caf.exit_reason)<GLOBAL operator() send.hpp:140 EXIT
{"actor1":3} 9 caf TRACE actor1 caf.scheduled_actor resume scheduled_actor.cpp:381 ENTRY max_throughput = 18446744073709551615
{"actor1":4} 9 caf TRACE actor1 caf.scheduled_actor activate scheduled_actor.cpp:744 ENTRY
{"actor1":5} 9 caf TRACE actor1 caf.event_based_actor initialize event_based_actor.cpp:36 ENTRY subtype = "caf.stateful_actor"
{"actor1":6} 9 caf TRACE actor1 caf.local_actor initialize local_actor.cpp:120 ENTRY id = 1 name = "spawn_server"
{"actor1":7} 9 caf TRACE actor1 caf.local_actor operator() local_actor.cpp:120 EXIT
{"actor1":8} 9 caf TRACE actor1 caf.event_based_actor make_behavior event_based_actor.cpp:50 ENTRY
{"actor1":9} 9 caf TRACE actor1 caf.$ spawn_serv_impl actor_system.cpp:156 ENTRY
{"actor1":10} 9 caf TRACE actor1 caf.$ operator() actor_system.cpp:156 EXIT
{"actor1":11} 9 caf TRACE actor1 caf.event_based_actor operator() event_based_actor.cpp:50 EXIT
{"actor1":12} 9 caf DEBUG actor1 caf.event_based_actor initialize event_based_actor.cpp:44 make_behavior() did return a valid behavior
{"actor1":13} 9 caf TRACE actor1 caf.scheduled_actor set_receive_timeout scheduled_actor.cpp:482 ENTRY
{"actor1":14} 9 caf TRACE actor1 caf.scheduled_actor operator() scheduled_actor.cpp:482 EXIT
{"actor1":15} 10 caf TRACE actor1 caf.event_based_actor operator() event_based_actor.cpp:36 EXIT
{"actor1":16} 10 caf TRACE actor1 caf.scheduled_actor finalize scheduled_actor.cpp:842 ENTRY
{"actor1":17} 10 caf TRACE actor1 caf.scheduled_actor operator() scheduled_actor.cpp:842 EXIT
{"actor1":18} 10 caf DEBUG actor1 caf.scheduled_actor activate scheduled_actor.cpp:761 initialized actor: name() = "spawn_server"
{"actor1":19} 10 caf TRACE actor1 caf.scheduled_actor operator() scheduled_actor.cpp:744 EXIT
{"actor1":20} 10 caf DEBUG actor1 caf.scheduled_actor resume scheduled_actor.cpp:402 start new DRR round
{"thread1":36} 9 caf TRACE thread1 caf anon_send_exit send.hpp:140 ENTRY dest = 2@invalid-node reason = user_shutdown
{"actor1":21} 10 caf TRACE actor1 caf.scheduled_actor.mailbox_visitor operator() scheduled_actor.cpp:364 ENTRY x = mailbox_element(null:pointer, message_id(1152921504606846976), <unprintable>, (exit_msg(1@invalid-node, exit_reason(user_shutdown)))) handled_msgs = 0
{"actor1":22} 11 caf TRACE actor1 caf.scheduled_actor reactivate scheduled_actor.cpp:787 ENTRY x = mailbox_element(null:pointer, message_id(1152921504606846976), <unprintable>, (exit_msg(1@invalid-node, exit_reason(user_shutdown))))
{"actor1":23} 11 caf TRACE actor1 caf.scheduled_actor consume scheduled_actor.cpp:626 ENTRY x = mailbox_element(null:pointer, message_id(1152921504606846976), <unprintable>, (exit_msg(1@invalid-node, exit_reason(user_shutdown))))
{"thread1":32,"actor1":24} 11 caf_flow DEBUG actor1 caf.scheduled_actor consume scheduled_actor.cpp:628 RECEIVE ; FROM = null:pointer ; STAGES = [] ; CONTENT = (exit_msg(1@invalid-node, exit_reason(user_shutdown)))
{"thread1":37} 10 caf TRACE thread1 caf.scheduled_actor enqueue scheduled_actor.cpp:158 ENTRY *ptr = mailbox_element(null:pointer, message_id(1152921504606846976), <unprintable>, (exit_msg(2@invalid-node, exit_reason(user_shutdown))))
{"thread1":32,"actor1":25} 11 caf TRACE actor1 caf.scheduled_actor categorize scheduled_actor.cpp:551 ENTRY x = mailbox_element(null:pointer, message_id(1152921504606846976), <unprintable>, (exit_msg(1@invalid-node, exit_reason(user_shutdown))))
{"thread1":32,"actor1":26} 11 caf TRACE actor1 caf.monitorable_actor unlink_from monitorable_actor.cpp:65 ENTRY x = 1@invalid-node
{"thread1":38} 11 caf_flow DEBUG thread1 caf.scheduled_actor enqueue scheduled_actor.cpp:159 SEND ; TO = 2@invalid-node ; FROM = null:pointer ; STAGES = [] ; CONTENT = (exit_msg(2@invalid-node, exit_reason(user_shutdown)))
{"thread1":32,"actor1":27} 11 caf TRACE actor1 caf.actor_addr&)<GLOBAL operator() monitorable_actor.cpp:65 EXIT
{"thread1":32,"actor1":28} 11 caf TRACE actor1 caf.scheduled_actor quit scheduled_actor.cpp:436 ENTRY x = exit_reason(user_shutdown)
{"thread1":32,"actor1":29} 11 caf TRACE actor1 caf.scheduled_actor operator() scheduled_actor.cpp:436 EXIT
{"thread1":32,"actor1":30} 11 caf TRACE actor1 caf.scheduled_actor operator() scheduled_actor.cpp:551 EXIT
{"thread1":32,"actor1":31} 11 caf DEBUG actor1 caf.scheduled_actor operator() scheduled_actor.cpp:678 handled system message
{"thread1":39} 11 caf_flow DEBUG thread1 caf.scheduled_actor enqueue scheduled_actor.cpp:164 ACCEPT ; UNBLOCKED = true
{"actor2":3} 11 caf TRACE actor2 caf.scheduled_actor resume scheduled_actor.cpp:381 ENTRY max_throughput = 18446744073709551615
{"actor2":4} 11 caf TRACE actor2 caf.scheduled_actor activate scheduled_actor.cpp:744 ENTRY
{"thread1":32,"actor1":32} 11 caf_flow DEBUG actor1 caf.scheduled_actor consume scheduled_actor.cpp:729 FINALIZE
{"actor2":5} 11 caf TRACE actor2 caf.event_based_actor initialize event_based_actor.cpp:36 ENTRY subtype = "caf.stateful_actor"
{"thread1":32,"actor1":33} 11 caf TRACE actor1 caf.scheduled_actor operator() scheduled_actor.cpp:626 EXIT
{"thread1":32,"actor1":34} 12 caf TRACE actor1 caf.scheduled_actor finalize scheduled_actor.cpp:842 ENTRY
{"thread1":32,"actor1":35} 12 caf DEBUG actor1 caf.scheduled_actor finalize scheduled_actor.cpp:865 actor has no behavior and is ready for cleanup
{"actor2":6} 11 caf TRACE actor2 caf.local_actor initialize local_actor.cpp:120 ENTRY id = 2 name = "config_server"
{"thread1":32,"actor1":36} 12 caf TRACE actor1 caf.stateful_actor<<template-parameter-1-1>%20.,%20<template-parameter-1-2>> on_exit stateful_actor.hpp:53 ENTRY
{"actor2":7} 12 caf TRACE actor2 caf.local_actor operator() local_actor.cpp:120 EXIT
{"thread1":32,"actor1":37} 12 caf TRACE actor1 [with%20State%20=%20caf.$ operator() stateful_actor.hpp:53 EXIT
{"actor2":8} 12 caf TRACE actor2 caf.event_based_actor make_behavior event_based_actor.cpp:50 ENTRY
{"actor2":9} 12 caf TRACE actor2 caf.$ config_serv_impl actor_system.cpp:54 ENTRY
{"actor2":10} 12 caf TRACE actor2 caf.$ operator() actor_system.cpp:54 EXIT
{"thread1":40} 11 caf TRACE thread1 caf.execution_unit*)<GLOBAL operator() scheduled_actor.cpp:158 EXIT
{"actor2":11} 12 caf TRACE actor2 caf.event_based_actor operator() event_based_actor.cpp:50 EXIT
{"thread1":32,"actor1":38} 12 caf TRACE actor1 caf.scheduled_actor cleanup scheduled_actor.cpp:225 ENTRY fail_state = exit_reason(user_shutdown)
{"actor2":12} 12 caf DEBUG actor2 caf.event_based_actor initialize event_based_actor.cpp:44 make_behavior() did return a valid behavior
{"thread1":41} 12 caf TRACE thread1 Dest&,%20caf.exit_reason)<GLOBAL operator() send.hpp:140 EXIT
{"thread1":32,"actor1":39} 12 caf TRACE actor1 caf.local_actor cleanup local_actor.cpp:124 ENTRY fail_state = exit_reason(user_shutdown)
{"actor2":13} 12 caf TRACE actor2 caf.scheduled_actor set_receive_timeout scheduled_actor.cpp:482 ENTRY
{"thread1":32,"actor1":40} 13 caf_flow DEBUG actor1 caf.local_actor cleanup local_actor.cpp:127 TERMINATE ; ID = 1 ; REASON = exit_reason(user_shutdown) ; NODE = invalid-node
{"thread1":32,"actor1":41} 13 caf TRACE actor1 caf.monitorable_actor cleanup monitorable_actor.cpp:78 ENTRY reason = exit_reason(user_shutdown)
{"actor2":14} 13 caf TRACE actor2 caf.scheduled_actor operator() scheduled_actor.cpp:482 EXIT
{"thread1":32,"actor1":42} 13 caf DEBUG actor1 caf.monitorable_actor cleanup monitorable_actor.cpp:95 cleanup id() = 1 node() = invalid-node fail_state_ = exit_reason(user_shutdown)
{"thread1":32,"actor1":43} 13 caf TRACE actor1 caf.execution_unit*)<GLOBAL operator() monitorable_actor.cpp:78 EXIT
{"actor2":15} 13 caf TRACE actor2 caf.event_based_actor operator() event_based_actor.cpp:36 EXIT
{"thread1":32,"actor1":44} 13 caf TRACE actor1 caf.execution_unit*)<GLOBAL operator() local_actor.cpp:124 EXIT
{"actor2":16} 13 caf TRACE actor2 caf.scheduled_actor finalize scheduled_actor.cpp:842 ENTRY
{"actor2":17} 13 caf TRACE actor2 caf.scheduled_actor operator() scheduled_actor.cpp:842 EXIT
{"thread1":32,"actor1":45} 13 caf TRACE actor1 caf.execution_unit*)<GLOBAL operator() scheduled_actor.cpp:225 EXIT
{"thread1":32,"actor1":46} 14 caf TRACE actor1 caf.scheduled_actor operator() scheduled_actor.cpp:842 EXIT
{"thread1":32,"actor1":47} 14 caf DEBUG actor1 caf.scheduled_actor reactivate scheduled_actor.cpp:805 actor finalized
{"thread1":32,"actor1":48} 14 caf TRACE actor1 caf.scheduled_actor operator() scheduled_actor.cpp:787 EXIT
{"thread1":32,"actor1":49} 14 caf TRACE actor1 caf.scheduled_actor.mailbox_visitor operator() scheduled_actor.cpp:364 EXIT
{"thread1":32,"actor1":50} 14 caf TRACE actor1 caf.scheduled_actor finalize scheduled_actor.cpp:842 ENTRY
{"thread1":32,"actor1":51} 14 caf TRACE actor1 caf.scheduled_actor operator() scheduled_actor.cpp:842 EXIT
{"thread1":32,"actor1":52} 14 caf TRACE actor1 size_t)<GLOBAL operator() scheduled_actor.cpp:381 EXIT
{"actor2":18} 13 caf DEBUG actor2 caf.scheduled_actor activate scheduled_actor.cpp:761 initialized actor: name() = "config_server"
{"actor2":19} 14 caf TRACE actor2 caf.scheduled_actor operator() scheduled_actor.cpp:744 EXIT
{"actor2":20} 14 caf DEBUG actor2 caf.scheduled_actor resume scheduled_actor.cpp:402 start new DRR round
{"actor2":21} 14 caf TRACE actor2 caf.scheduled_actor.mailbox_visitor operator() scheduled_actor.cpp:364 ENTRY x = mailbox_element(null:pointer, message_id(1152921504606846976), <unprintable>, (exit_msg(2@invalid-node, exit_reason(user_shutdown)))) handled_msgs = 0
{"actor2":22} 14 caf TRACE actor2 caf.scheduled_actor reactivate scheduled_actor.cpp:787 ENTRY x = mailbox_element(null:pointer, message_id(1152921504606846976), <unprintable>, (exit_msg(2@invalid-node, exit_reason(user_shutdown))))
{"actor2":23} 14 caf TRACE actor2 caf.scheduled_actor consume scheduled_actor.cpp:626 ENTRY x = mailbox_element(null:pointer, message_id(1152921504606846976), <unprintable>, (exit_msg(2@invalid-node, exit_reason(user_shutdown))))
{"thread1":38,"actor2":24} 14 caf_flow DEBUG actor2 caf.scheduled_actor consume scheduled_actor.cpp:628 RECEIVE ; FROM = null:pointer ; STAGES = [] ; CONTENT = (exit_msg(2@invalid-node, exit_reason(user_shutdown)))
{"thread1":38,"actor2":25} 15 caf TRACE actor2 caf.scheduled_actor categorize scheduled_actor.cpp:551 ENTRY x = mailbox_element(null:pointer, message_id(1152921504606846976), <unprintable>, (exit_msg(2@invalid-node, exit_reason(user_shutdown))))
{"thread1":38,"actor2":26} 15 caf TRACE actor2 caf.monitorable_actor unlink_from monitorable_actor.cpp:65 ENTRY x = 2@invalid-node
{"thread1":38,"actor2":27} 15 caf TRACE actor2 caf.actor_addr&)<GLOBAL operator() monitorable_actor.cpp:65 EXIT
{"thread1":38,"actor2":28} 15 caf TRACE actor2 caf.scheduled_actor quit scheduled_actor.cpp:436 ENTRY x = exit_reason(user_shutdown)
{"thread1":38,"actor2":29} 15 caf TRACE actor2 caf.scheduled_actor operator() scheduled_actor.cpp:436 EXIT
{"thread1":38,"actor2":30} 15 caf TRACE actor2 caf.scheduled_actor operator() scheduled_actor.cpp:551 EXIT
{"thread1":38,"actor2":31} 15 caf DEBUG actor2 caf.scheduled_actor operator() scheduled_actor.cpp:678 handled system message
{"thread1":38,"actor2":32} 15 caf_flow DEBUG actor2 caf.scheduled_actor consume scheduled_actor.cpp:729 FINALIZE
{"thread1":38,"actor2":33} 15 caf TRACE actor2 caf.scheduled_actor operator() scheduled_actor.cpp:626 EXIT
{"thread1":38,"actor2":34} 15 caf TRACE actor2 caf.scheduled_actor finalize scheduled_actor.cpp:842 ENTRY
{"thread1":38,"actor2":35} 15 caf DEBUG actor2 caf.scheduled_actor finalize scheduled_actor.cpp:865 actor has no behavior and is ready for cleanup
{"thread1":38,"actor2":36} 15 caf TRACE actor2 caf.stateful_actor<<template-parameter-1-1>%20.,%20<template-parameter-1-2>> on_exit stateful_actor.hpp:53 ENTRY
{"thread1":38,"actor2":37} 15 caf TRACE actor2 [with%20State%20=%20caf.$ operator() stateful_actor.hpp:53 EXIT
{"thread1":38,"actor2":38} 15 caf TRACE actor2 caf.scheduled_actor cleanup scheduled_actor.cpp:225 ENTRY fail_state = exit_reason(user_shutdown)
{"thread1":38,"actor2":39} 15 caf TRACE actor2 caf.local_actor cleanup local_actor.cpp:124 ENTRY fail_state = exit_reason(user_shutdown)
{"thread1":38,"actor2":40} 15 caf_flow DEBUG actor2 caf.local_actor cleanup local_actor.cpp:127 TERMINATE ; ID = 2 ; REASON = exit_reason(user_shutdown) ; NODE = invalid-node
{"thread1":38,"actor2":41} 15 caf TRACE actor2 caf.monitorable_actor cleanup monitorable_actor.cpp:78 ENTRY reason = exit_reason(user_shutdown)
{"thread1":38,"actor2":42} 15 caf DEBUG actor2 caf.monitorable_actor cleanup monitorable_actor.cpp:95 cleanup id() = 2 node() = invalid-node fail_state_ = exit_reason(user_shutdown)
{"thread1":38,"actor2":43} 15 caf TRACE actor2 caf.execution_unit*)<GLOBAL operator() monitorable_actor.cpp:78 EXIT
{"thread1":38,"actor2":44} 15 caf TRACE actor2 caf.execution_unit*)<GLOBAL operator() local_actor.cpp:124 EXIT
{"thread1":38,"actor2":45} 15 caf TRACE actor2 caf.execution_unit*)<GLOBAL operator() scheduled_actor.cpp:225 EXIT
{"thread1":38,"actor2":46} 15 caf TRACE actor2 caf.scheduled_actor operator() scheduled_actor.cpp:842 EXIT
{"thread1":38,"actor2":47} 15 caf DEBUG actor2 caf.scheduled_actor reactivate scheduled_actor.cpp:805 actor finalized
{"thread1":38,"actor2":48} 15 caf TRACE actor2 caf.scheduled_actor operator() scheduled_actor.cpp:787 EXIT
{"thread1":38,"actor2":49} 15 caf TRACE actor2 caf.scheduled_actor.mailbox_visitor operator() scheduled_actor.cpp:364 EXIT
{"thread1":38,"actor2":50} 16 caf TRACE actor2 caf.scheduled_actor finalize scheduled_actor.cpp:842 ENTRY
{"thread1":38,"actor2":51} 16 caf TRACE actor2 caf.scheduled_actor operator() scheduled_actor.cpp:842 EXIT
{"thread1":38,"actor2":52} 16 caf TRACE actor2 size_t)<GLOBAL operator() scheduled_actor.cpp:381 EXIT
{"thread1":42} 12 caf TRACE thread1 caf.group_manager stop group_manager.cpp:480 ENTRY
{"thread1":43} 16 caf TRACE thread1 caf.$.local_group_module stop group_manager.cpp:415 ENTRY
{"thread1":44} 16 caf TRACE thread1 caf.$.local_group_module operator() group_manager.cpp:415 EXIT
{"thread1":45} 16 caf TRACE thread1 caf.group_manager operator() group_manager.cpp:480 EXIT
{"thread1":46} 16 caf DEBUG thread1 caf.actor_system ~actor_system actor_system.cpp:314 stop module Scheduler
{"thread1":47} 17 caf TRACE thread1 caf.scheduler.abstract_coordinator stop_actors abstract_coordinator.cpp:262 ENTRY
{"thread1":48} 17 caf_flow DEBUG thread1 caf make_actor make_actor.hpp:43 SPAWN ; ID = 6 ; NAME = scoped_actor ; TYPE = caf.ANON.impl ; ARGS = (actor_config(detached_flag, hidden_flag)) ; NODE = invalid-node ; GROUPS = []
{"actor6":1} 17 caf TRACE actor6 caf.$.impl launch scoped_actor.cpp:46 ENTRY hide = false
{"actor6":2} 17 caf DEBUG actor6 caf.actor_registry inc_running actor_registry.cpp:102 value = 1
{"actor6":3} 17 caf TRACE actor6 caf.local_actor initialize local_actor.cpp:120 ENTRY id = 6 name = "scoped_actor"
{"actor6":4} 17 caf TRACE actor6 caf.local_actor operator() local_actor.cpp:120 EXIT
{"actor6":5} 17 caf TRACE actor6 bool,%20bool)<GLOBAL operator() scoped_actor.cpp:46 EXIT
{"actor6":6} 17 caf TRACE actor6 caf anon_send_exit send.hpp:140 ENTRY dest = 3@invalid-node reason = user_shutdown
{"actor6":7} 17 caf TRACE actor6 caf.blocking_actor enqueue blocking_actor.cpp:67 ENTRY *ptr = mailbox_element(null:pointer, message_id(1152921504606846976), <unprintable>, (exit_msg(3@invalid-node, exit_reason(user_shutdown))))
{"actor6":8} 17 caf_flow DEBUG actor6 caf.blocking_actor enqueue blocking_actor.cpp:68 SEND ; TO = 3@invalid-node ; FROM = null:pointer ; STAGES = [] ; CONTENT = (exit_msg(3@invalid-node, exit_reason(user_shutdown)))
{"actor6":9} 17 caf_flow DEBUG actor6 caf.blocking_actor enqueue blocking_actor.cpp:79 ACCEPT ; UNBLOCKED = false
{"actor6":10} 17 caf TRACE actor6 caf.execution_unit*)<GLOBAL operator() blocking_actor.cpp:67 EXIT
{"actor6":11} 17 caf TRACE actor6 Dest&,%20caf.exit_reason)<GLOBAL operator() send.hpp:140 EXIT
{"actor6":12} 17 caf TRACE actor6 caf.monitorable_actor attach monitorable_actor.cpp:40 ENTRY
{"actor6":13} 17 caf TRACE actor6 caf.monitorable_actor operator() monitorable_actor.cpp:40 EXIT
{"actor6":14} 17 caf TRACE actor6 caf.blocking_actor receive_impl blocking_actor.cpp:234 ENTRY mid = message_id(1152921504606846976)
{"actor3":30,"actor4":35,"actor5":56} 17 caf TRACE actor3 caf.blocking_actor.mailbox_visitor operator() blocking_actor.cpp:162 ENTRY x = mailbox_element(null:pointer, message_id(1152921504606846976), <unprintable>, (exit_msg(3@invalid-node, exit_reason(user_shutdown))))
{"actor3":31,"actor4":35,"actor5":56,"actor6":8} 17 caf_flow DEBUG actor3 caf.blocking_actor.mailbox_visitor operator() blocking_actor.cpp:163 RECEIVE ; FROM = null:pointer ; STAGES = [] ; CONTENT = (exit_msg(3@invalid-node, exit_reason(user_shutdown)))
{"actor3":32,"actor4":35,"actor5":56,"actor6":8} 17 caf TRACE actor3 caf.monitorable_actor unlink_from monitorable_actor.cpp:65 ENTRY x = 3@invalid-node
{"actor3":33,"actor4":35,"actor5":56,"actor6":8} 17 caf TRACE actor3 caf.actor_addr&)<GLOBAL operator() monitorable_actor.cpp:65 EXIT
{"actor3":34,"actor4":35,"actor5":56,"actor6":8} 18 caf TRACE actor3 caf.detail.default_invoke_result_visitor<Self> operator() default_invoke_result_visitor.hpp:48 ENTRY x = <empty-message>
{"actor3":35,"actor4":35,"actor5":56,"actor6":8} 18 caf DEBUG actor3 caf.detail.default_invoke_result_visitor<Self> delegate default_invoke_result_visitor.hpp:80 suppress response message: invalid response promise
{"actor3":36,"actor4":35,"actor5":56,"actor6":8} 18 caf TRACE actor3 operator() default_invoke_result_visitor.hpp:48 EXIT
18 caf_flow DEBUG actor3 140326738097920 caf.blocking_actor.mailbox_visitor operator() blocking_actor.cpp:227 FINALIZE
{"actor3":37,"actor4":35,"actor5":56,"actor6":8} 18 caf TRACE actor3 caf.blocking_actor.mailbox_visitor operator() blocking_actor.cpp:162 EXIT
{"actor3":38,"actor4":35,"actor5":56,"actor6":8} 18 caf TRACE actor3 caf.message_id,%20caf.detail.blocking_behavior&)<GLOBAL operator() blocking_actor.cpp:234 EXIT
{"actor3":39,"actor4":35,"actor5":56,"actor6":8} 22 caf TRACE actor3 caf.local_actor cleanup local_actor.cpp:124 ENTRY fail_state = exit_reason(user_shutdown)
{"actor3":40,"actor4":35,"actor5":56,"actor6":8} 22 caf_flow DEBUG actor3 caf.local_actor cleanup local_actor.cpp:127 TERMINATE ; ID = 3 ; REASON = exit_reason(user_shutdown) ; NODE = invalid-node
{"actor3":41,"actor4":35,"actor5":56,"actor6":8} 22 caf TRACE actor3 caf.monitorable_actor cleanup monitorable_actor.cpp:78 ENTRY reason = exit_reason(user_shutdown)
{"actor3":42,"actor4":35,"actor5":56,"actor6":8} 22 caf DEBUG actor3 caf.monitorable_actor cleanup monitorable_actor.cpp:95 cleanup id() = 3 node() = invalid-node fail_state_ = exit_reason(user_shutdown)
{"actor3":43,"actor4":35,"actor5":56,"actor6":8} 22 caf TRACE actor3 caf.blocking_actor enqueue blocking_actor.cpp:67 ENTRY *ptr = mailbox_element(null:pointer, message_id(1152921504606846976), <unprintable>, (caf::wait_for_atom()))
{"actor3":44,"actor4":35,"actor5":56,"actor6":8} 22 caf_flow DEBUG actor3 caf.blocking_actor enqueue blocking_actor.cpp:68 SEND ; TO = 6@invalid-node ; FROM = null:pointer ; STAGES = [] ; CONTENT = (caf::wait_for_atom())
{"actor3":45,"actor4":35,"actor5":56,"actor6":8} 22 caf_flow DEBUG actor3 caf.blocking_actor enqueue blocking_actor.cpp:79 ACCEPT ; UNBLOCKED = false
{"actor3":46,"actor4":35,"actor5":56,"actor6":8} 22 caf TRACE actor3 caf.execution_unit*)<GLOBAL operator() blocking_actor.cpp:67 EXIT
{"actor3":47,"actor4":35,"actor5":56,"actor6":8} 22 caf TRACE actor3 caf.execution_unit*)<GLOBAL operator() monitorable_actor.cpp:78 EXIT
{"actor3":48,"actor4":35,"actor5":56,"actor6":8} 22 caf TRACE actor3 caf.execution_unit*)<GLOBAL operator() local_actor.cpp:124 EXIT
{"actor6":15} 22 caf TRACE actor6 caf.blocking_actor.mailbox_visitor operator() blocking_actor.cpp:162 ENTRY x = mailbox_element(null:pointer, message_id(1152921504606846976), <unprintable>, (caf::wait_for_atom()))
{"actor3":44,"actor4":35,"actor5":56,"actor6":16} 22 caf_flow DEBUG actor6 caf.blocking_actor.mailbox_visitor operator() blocking_actor.cpp:163 RECEIVE ; FROM = null:pointer ; STAGES = [] ; CONTENT = (caf::wait_for_atom())
{"actor3":44,"actor4":35,"actor5":56,"actor6":17} 23 caf TRACE actor6 caf.detail.default_invoke_result_visitor<Self> operator() default_invoke_result_visitor.hpp:48 ENTRY x = <empty-message>
{"actor3":44,"actor4":35,"actor5":56,"actor6":18} 23 caf DEBUG actor6 caf.detail.default_invoke_result_visitor<Self> delegate default_invoke_result_visitor.hpp:80 suppress response message: invalid response promise
{"actor3":44,"actor4":35,"actor5":56,"actor6":19} 23 caf TRACE actor6 operator() default_invoke_result_visitor.hpp:48 EXIT
23 caf_flow DEBUG actor6 140326802720640 caf.blocking_actor.mailbox_visitor operator() blocking_actor.cpp:227 FINALIZE
{"actor3":44,"actor4":35,"actor5":56,"actor6":20} 23 caf TRACE actor6 caf.blocking_actor.mailbox_visitor operator() blocking_actor.cpp:162 EXIT
{"actor3":44,"actor4":35,"actor5":56,"actor6":21} 23 caf TRACE actor6 caf.message_id,%20caf.detail.blocking_behavior&)<GLOBAL operator() blocking_actor.cpp:234 EXIT
{"actor3":44,"actor4":35,"actor5":56,"actor6":22} 23 caf TRACE actor6 caf.local_actor cleanup local_actor.cpp:124 ENTRY fail_state = none
{"actor3":44,"actor4":35,"actor5":56,"actor6":23} 23 caf DEBUG actor6 caf.actor_registry dec_running actor_registry.cpp:118 new_val = 0
{"actor3":44,"actor4":35,"actor5":56,"actor6":24} 23 caf_flow DEBUG actor6 caf.local_actor cleanup local_actor.cpp:127 TERMINATE ; ID = 6 ; REASON = none ; NODE = invalid-node
{"actor3":44,"actor4":35,"actor5":56,"actor6":25} 23 caf TRACE actor6 caf.monitorable_actor cleanup monitorable_actor.cpp:78 ENTRY reason = none
{"actor3":44,"actor4":35,"actor5":56,"actor6":26} 23 caf DEBUG actor6 caf.monitorable_actor cleanup monitorable_actor.cpp:95 cleanup id() = 6 node() = invalid-node fail_state_ = none
{"actor3":44,"actor4":35,"actor5":56,"actor6":27} 23 caf TRACE actor6 caf.execution_unit*)<GLOBAL operator() monitorable_actor.cpp:78 EXIT
{"actor3":44,"actor4":35,"actor5":56,"actor6":28} 23 caf TRACE actor6 caf.execution_unit*)<GLOBAL operator() local_actor.cpp:124 EXIT
{"thread1":49} 23 caf TRACE thread1 caf.scheduler.abstract_coordinator operator() abstract_coordinator.cpp:262 EXIT
{"thread1":50} 26 caf TRACE thread1 caf.actor_system operator() actor_system.cpp:295 EXIT
